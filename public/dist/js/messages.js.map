{
  "version": 3,
  "sources": ["../../src/js/messages.js"],
  "sourcesContent": ["//1. AUTO PROFILER FUNCTION\r\n// Profiler with mgs writer to db function\r\n(Fuc = () => {\r\n  const Home = document.querySelector(\".Home\");\r\n  //to find usrcl the button for search users\r\n  const proflrobsrvr = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      mutation.addedNodes.forEach((node) => {\r\n        const nodeusrcl = node.matches?.(\".usrcl\")\r\n          ? node\r\n          : node.querySelector?.(\".usrcl\");\r\n\r\n        if (nodeusrcl) {\r\n          Home.addEventListener(\"click\", function (event) {\r\n            if (event.target.matches(\".usrcl\")) {\r\n              console.log(\"user button was clicked!\");\r\n              //1.PROFILER MGS\r\n              //mnchtMgs  Function to find message div for messages purpose!\r\n              const mnchtMgsobsrvr = new MutationObserver((mutations) => {\r\n                mutations.forEach((mutation) => {\r\n                  mutation.addedNodes.forEach((node) => {\r\n                    const nodemnchtMgs = node.matches?.(\".mnchtMgs\")\r\n                      ? node\r\n                      : node.querySelector?.(\".mnchtMgs\");\r\n\r\n                    const nodechtsbmtBtn = node.matches?.(\".chtsbmtBtn\")\r\n                      ? node\r\n                      : node.querySelector?.(\".chtsbmtBtn\");\r\n\r\n                    if (nodemnchtMgs) {\r\n                      console.log(\"we have message div\");\r\n                      //LOAD SPINNER\r\n                      nodemnchtMgs.innerHTML = `<div>\r\n                  <img src=\"/assests/animations/loading.gif\" width=\"50\" alt=\"\" />\r\n                    </div>`;\r\n                      //COOKIE RETREIVAL...\r\n                      autockie = (elem) => {\r\n                        let ckies = document.cookie.split(\"; \");\r\n                        for (let i = 0; i < ckies.length; i++) {\r\n                          let cookie = ckies[i];\r\n                          let [name, value] = cookie.split(\"=\");\r\n                          if (name === elem) {\r\n                            return decodeURIComponent(value);\r\n                          }\r\n                        }\r\n                        return null;\r\n                      };\r\n\r\n                      let sltdusrp = autockie(\"targtdusrprt\");\r\n                      let lgrusrp = autockie(\"usrP\");\r\n                      const prtsObj = {\r\n                        lgrsur: lgrusrp,\r\n                        sltdusr: sltdusrp,\r\n                      };\r\n                      console.log(`loger: ${lgrusrp} & recepient: ${sltdusrp}`);\r\n                      //  Query messages\r\n                      const Home = document.querySelector(\".Home\");\r\n                      fetch(\"/mgs/prtsmgs\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                          \"Content-Type\": \"application/json\",\r\n                          // 'Authorization': 'Bearer YOUR_TOKEN',\r\n                        },\r\n                        body: JSON.stringify(prtsObj),\r\n                      })\r\n                        .then((response) => response.text())\r\n                        .then((data) => {\r\n                          if (data) {\r\n                            //Messages\r\n                            //nodemnchtMgs.innerHTML = `${data}`;\r\n                            console.log(data);\r\n                            const datadt = JSON.parse(data); // Parse the JSON string\r\n\r\n                            if (Array.isArray(datadt)) {\r\n                              nodemnchtMgs.innerHTML = \"\"; // Clear the panel first\r\n\r\n                              datadt.forEach((msg) => {\r\n                                const msgDiv = document.createElement(\"div\");\r\n                                msgDiv.innerHTML = `\r\n                                  <div class=\"mgscrd\" data-id=\"${\r\n                                    msg.id\r\n                                  }\" data-pstn=\"${msg.from}\">\r\n\r\n                                  <div class=\"mgscrdCnt\"><p class=\"singlemgscl\">${\r\n                                    msg.message\r\n                                  }</p>\r\n                                  <span class=\"mgsftnote\">From ${msg.from} to ${\r\n                                  msg.to\r\n                                } -- ${new Date(\r\n                                  msg.createdAt\r\n                                ).toLocaleString()}</span>\r\n                                  \r\n                                  </div>\r\n                                  </div> `;\r\n                                nodemnchtMgs.appendChild(msgDiv);\r\n                              });\r\n                            }\r\n                          }\r\n                        })\r\n                        .catch((error) => console.log(error));\r\n                    }\r\n                  });\r\n                });\r\n              });\r\n\r\n              mnchtMgsobsrvr.observe(Home, { childList: true, subtree: true });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  proflrobsrvr.observe(Home, { childList: true, subtree: true });\r\n})();\r\n\r\n//////2. CLICK PROFILER FUNCTION\r\n// Profiler mapping messages based on click\r\n(Cuc = () => {\r\n  const Home = document.querySelector(\".Home\");\r\n  //to find usrcl the button for search users\r\n  const proflrobsrvr = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      mutation.addedNodes.forEach((node) => {\r\n        const nodeusrcl = node.matches?.(\".usrcl\")\r\n          ? node\r\n          : node.querySelector?.(\".usrcl\");\r\n\r\n        if (nodeusrcl) {\r\n          Home.addEventListener(\"click\", function (event) {\r\n            if (event.target.matches(\".usrcl\")) {\r\n              console.log(\"user button was clicked!\");\r\n              //1.PROFILER MGS\r\n              //mnchtMgs  Function to find message div for messages purpose!\r\n              const mnchtMgsobsrvr = new MutationObserver((mutations) => {\r\n                mutations.forEach((mutation) => {\r\n                  mutation.addedNodes.forEach((node) => {\r\n                    const nodemnchtMgs = node.matches?.(\".mnchtMgs\")\r\n                      ? node\r\n                      : node.querySelector?.(\".mnchtMgs\");\r\n\r\n                    const nodechtsbmtBtn = node.matches?.(\".chtsbmtBtn\")\r\n                      ? node\r\n                      : node.querySelector?.(\".chtsbmtBtn\");\r\n\r\n                    if (nodechtsbmtBtn) {\r\n                      console.log(\"we have message div nodechtsbmtBtn\");\r\n                      nodechtsbmtBtn.addEventListener(\"click\", () => {\r\n                        autockie = (elem) => {\r\n                          let ckies = document.cookie.split(\"; \");\r\n                          for (let i = 0; i < ckies.length; i++) {\r\n                            let cookie = ckies[i];\r\n                            let [name, value] = cookie.split(\"=\");\r\n                            if (name === elem) {\r\n                              return decodeURIComponent(value);\r\n                            }\r\n                          }\r\n                          return null;\r\n                        };\r\n\r\n                        let sltdusrp = autockie(\"targtdusrprt\");\r\n                        let lgrusrp = autockie(\"usrP\");\r\n                        const prtsObj = {\r\n                          lgrusr: lgrusrp,\r\n                          sltdusr: sltdusrp,\r\n                        };\r\n                        console.log(\r\n                          `both loger: ${lgrusrp} & recepient: ${sltdusrp}`\r\n                        );\r\n                        //WEBSOCKET WITH MESSAGE PROFILER FUNCTION\r\n                        //localhost,live, mgs & data sent\r\n                        const socket = new WebSocket(\"ws://localhost:2001\");\r\n                        socket.addEventListener(\"open\", () => {\r\n                          console.log(\"Live!!!!\");\r\n                          socket.send(JSON.stringify(prtsObj));\r\n                        }); //testing socket mgs\r\n                        socket.addEventListener(\"message\", (event) => {\r\n                          /* console.log(event.data); */\r\n                          const datadt = JSON.parse(event.data); // Parse the JSON string\r\n                          window.scrollTo({\r\n                            top: nodemnchtMgs.scrollHeight,\r\n                            behavior: \"smooth\",\r\n                          });\r\n                          if (Array.isArray(datadt)) {\r\n                            nodemnchtMgs.innerHTML = \"\"; // Clear the panel first\r\n\r\n                            datadt.forEach((msg) => {\r\n                              const msgDiv = document.createElement(\"div\");\r\n                              msgDiv.innerHTML = `\r\n                                  <div class=\"mgscrd\" data-id=\"${\r\n                                    msg.id\r\n                                  }\" data-pstn=\"${msg.from}\">\r\n\r\n                                  <div class=\"mgscrdCnt\"><p class=\"singlemgscl\">${\r\n                                    msg.message\r\n                                  }</p>\r\n                                  <span class=\"mgsftnote\">From ${msg.from} to ${\r\n                                msg.to\r\n                              } -- ${new Date(\r\n                                msg.createdAt\r\n                              ).toLocaleString()}</span>\r\n                                  \r\n                                  </div>\r\n                                  </div> `;\r\n                              nodemnchtMgs.appendChild(msgDiv);\r\n                              console.log(\"working on socket\");\r\n                            });\r\n                          }\r\n                        }); //manual mgs (default or data)\r\n                      });\r\n                    }\r\n                  });\r\n                });\r\n              });\r\n\r\n              mnchtMgsobsrvr.observe(Home, { childList: true, subtree: true });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  proflrobsrvr.observe(Home, { childList: true, subtree: true });\r\n})();\r\n\r\n//3. POSITIONR FUNCTION\r\n(pstn = () => {\r\n  const Home = document.querySelector(\".Home\");\r\n  //to find usrcl the button for search users\r\n  const positionerobsrvr = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      mutation.addedNodes.forEach((node) => {\r\n        const nodeusrcl = node.matches?.(\".usrcl\")\r\n          ? node\r\n          : node.querySelector?.(\".usrcl\");\r\n\r\n        if (nodeusrcl) {\r\n          Home.addEventListener(\"click\", function (event) {\r\n            if (event.target.matches(\".usrcl\")) {\r\n              console.log(\"user button was clicked!\");\r\n              //1.PROFILER MGS\r\n              //mnchtMgs  Function to find message div for messages purpose!\r\n              const pstnrobsrvr = new MutationObserver((mutations) => {\r\n                mutations.forEach((mutation) => {\r\n                  mutation.addedNodes.forEach((node) => {\r\n                    const nodemnchtMgs = node.matches?.(\".mnchtMgs\")\r\n                      ? node\r\n                      : node.querySelector?.(\".mnchtMgs\");\r\n\r\n                    if (nodemnchtMgs) {\r\n                      const pstnrmmchtobsrvr = new MutationObserver(\r\n                        (mutations) => {\r\n                          mutations.forEach((mutation) => {\r\n                            mutation.addedNodes.forEach((node) => {\r\n                              const nodemgscrd = node.matches?.(\".mgscrd\")\r\n                                ? node\r\n                                : node.querySelectorAll?.(\".mgscrd\");\r\n\r\n                              // You can add more elements in here for theones in messages div\r\n                              if (nodemgscrd) {\r\n                                nodemgscrd.forEach((elem) => {\r\n                                  console.log(\"cards !!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                  console.log(elem.dataset.pstn);\r\n                                  //logined in user port\r\n                                  prtckie = (elem) => {\r\n                                    let ckies = document.cookie.split(\"; \");\r\n                                    for (let i = 0; i < ckies.length; i++) {\r\n                                      let cookie = ckies[i];\r\n                                      let [name, value] = cookie.split(\"=\");\r\n                                      if (name === elem) {\r\n                                        return decodeURIComponent(value);\r\n                                      }\r\n                                    }\r\n                                    return null;\r\n                                  };\r\n\r\n                                  let usrprtckie = prtckie(\"usrP\");\r\n                                  console.log(usrprtckie);\r\n                                  if (elem.dataset.pstn === usrprtckie) {\r\n                                    //Sender usr messages\r\n                                    console.log(\"same\");\r\n                                    elem.style.display = \"flex\";\r\n                                    elem.style.justifyContent = \"end\";\r\n                                  } else if (elem.dataset.pstn !== usrprtckie) {\r\n                                    //Receiver usr messages\r\n                                    console.log(\"different\");\r\n                                    elem.style.display = \"flex\";\r\n                                    elem.style.justifyContent = \"start\";\r\n                                  }\r\n                                  console.log(\"ends.....\");\r\n                                });\r\n                              }\r\n                            });\r\n                          });\r\n                        }\r\n                      );\r\n\r\n                      pstnrmmchtobsrvr.observe(Home, {\r\n                        childList: true,\r\n                        subtree: true,\r\n                      });\r\n                    }\r\n                  });\r\n                });\r\n              });\r\n\r\n              pstnrobsrvr.observe(Home, {\r\n                childList: true,\r\n                subtree: true,\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  positionerobsrvr.observe(Home, { childList: true, subtree: true });\r\n})();\r\n\r\n//Auto connection to websocket\r\n(autoSocket = () => {\r\n  const Home = document.querySelector(\".Home\");\r\n  const proflrobsrvr = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      mutation.addedNodes.forEach((node) => {\r\n        const nodeusrcl = node.matches?.(\".usrcl\")\r\n          ? node\r\n          : node.querySelector?.(\".usrcl\");\r\n\r\n        if (nodeusrcl) {\r\n          Home.addEventListener(\"click\", function (event) {\r\n            if (event.target.matches(\".usrcl\")) {\r\n              //message div for messages purpose!\r\n              const mnchtMgsobsrvr = new MutationObserver((mutations) => {\r\n                mutations.forEach((mutation) => {\r\n                  mutation.addedNodes.forEach((node) => {\r\n                    const nodemnchtMgs = node.matches?.(\".mnchtMgs\")\r\n                      ? node\r\n                      : node.querySelector?.(\".mnchtMgs\");\r\n\r\n                    const nodechtsbmtBtn = node.matches?.(\".chtsbmtBtn\")\r\n                      ? node\r\n                      : node.querySelector?.(\".chtsbmtBtn\");\r\n\r\n                    if (nodechtsbmtBtn) {\r\n                      autockie = (elem) => {\r\n                        let ckies = document.cookie.split(\"; \");\r\n                        for (let i = 0; i < ckies.length; i++) {\r\n                          let cookie = ckies[i];\r\n                          let [name, value] = cookie.split(\"=\");\r\n                          if (name === elem) {\r\n                            return decodeURIComponent(value);\r\n                          }\r\n                        }\r\n                        return null;\r\n                      };\r\n\r\n                      let sltdusrp = autockie(\"targtdusrprt\");\r\n                      let lgrusrp = autockie(\"usrP\");\r\n                      const prtsObj = {\r\n                        lgrusr: lgrusrp,\r\n                        sltdusr: sltdusrp,\r\n                      };\r\n                      //WEBSOCKET WITH MESSAGE PROFILER FUNCTION\r\n                      //localhost,live, mgs & data sent\r\n                      const socket = new WebSocket(\"ws://localhost:2001\");\r\n                      socket.addEventListener(\"open\", () => {\r\n                        socket.send(JSON.stringify(prtsObj));\r\n                      });\r\n                      socket.addEventListener(\"message\", (event) => {\r\n                        const datadt = JSON.parse(event.data);\r\n                        //auto window scroll based on node-main-chat-messages(nodemnchtMgs)\r\n                        window.scrollTo({\r\n                          top: nodemnchtMgs.scrollHeight,\r\n                          behavior: \"smooth\",\r\n                        });\r\n                        if (Array.isArray(datadt)) {\r\n                          nodemnchtMgs.innerHTML = \"\";\r\n\r\n                          datadt.forEach((msg) => {\r\n                            const msgDiv = document.createElement(\"div\");\r\n                            msgDiv.innerHTML = `\r\n                                  <div class=\"mgscrd\" data-id=\"${\r\n                                    msg.id\r\n                                  }\" data-pstn=\"${msg.from}\">\r\n\r\n                                  <div class=\"mgscrdCnt\"><p class=\"singlemgscl\">${\r\n                                    msg.message\r\n                                  }</p>\r\n                                  <span class=\"mgsftnote\">From ${msg.from} to ${\r\n                              msg.to\r\n                            } -- ${new Date(\r\n                              msg.createdAt\r\n                            ).toLocaleString()}</span>\r\n                                  \r\n                                  </div>\r\n                                  </div> `;\r\n                            nodemnchtMgs.appendChild(msgDiv);\r\n                          });\r\n                        }\r\n                      });\r\n                    }\r\n                  });\r\n                });\r\n              });\r\n              mnchtMgsobsrvr.observe(Home, { childList: true, subtree: true });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  proflrobsrvr.observe(Home, { childList: true, subtree: true });\r\n})();\r\n\r\n//Auto scroll down on chats page\r\n/* const landing_Home = document.querySelector(\".Home\");\r\nif (landing_Home) {\r\n  const scrollobsrvr = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      mutation.addedNodes.forEach((node) => {\r\n        const nodemscrlnchtMgs = node.matches?.(\".mnchtMgs\")\r\n          ? node\r\n          : node.querySelector?.(\".mnchtMgs\");\r\n\r\n        if (nodemscrlnchtMgs) {\r\n          window.scrollTo({\r\n            top: document.body.scrollHeight,\r\n            behavior: \"smooth\",\r\n          });\r\n          console.log(\"scrollllllllllllllllllllllllllllllllllllllllllllllllll\");\r\n          console.log(\"Scroll height:\", document.body.scrollHeight);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  scrollobsrvr.observe(landing_Home, { childList: true, subtree: true });\r\n} */\r\n"],
  "mappings": "gFAEC,IAAMA,EAAA,IAAM,CACX,IAAMC,EAAO,SAAS,cAAc,OAAO,EAEtB,IAAI,iBAAkBC,GAAc,CACvDA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,EAClBA,EAAK,UAAU,QAAQ,EACrCA,EACAA,EAAK,gBAAgB,QAAQ,IAG/BH,EAAK,iBAAiB,QAAS,SAAUI,EAAO,CAC1CA,EAAM,OAAO,QAAQ,QAAQ,IAC/B,QAAQ,IAAI,0BAA0B,EAGf,IAAI,iBAAkBH,GAAc,CACzDA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,CACpC,IAAME,EAAeF,EAAK,UAAU,WAAW,EAC3CA,EACAA,EAAK,gBAAgB,WAAW,EAE9BG,EAAiBH,EAAK,UAAU,aAAa,EAC/CA,EACAA,EAAK,gBAAgB,aAAa,EAEtC,GAAIE,EAAc,CAChB,QAAQ,IAAI,qBAAqB,EAEjCA,EAAa,UAAY;AAAA;AAAA,4BAIzB,SAAWN,EAACQ,GAAS,CACnB,IAAIC,EAAQ,SAAS,OAAO,MAAM,IAAI,EACtC,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACrC,IAAIC,EAASF,EAAMC,CAAC,EAChB,CAACE,EAAMC,CAAK,EAAIF,EAAO,MAAM,GAAG,EACpC,GAAIC,IAASJ,EACX,OAAO,mBAAmBK,CAAK,CAEnC,CACA,OAAO,IACT,EAVW,YAYX,IAAIC,EAAW,SAAS,cAAc,EAClCC,EAAU,SAAS,MAAM,EACvBC,EAAU,CACd,OAAQD,EACR,QAASD,CACX,EACA,QAAQ,IAAI,UAAUC,CAAO,iBAAiBD,CAAQ,EAAE,EAExD,IAAMb,EAAO,SAAS,cAAc,OAAO,EAC3C,MAAM,eAAgB,CACpB,OAAQ,OACR,QAAS,CACP,eAAgB,kBAElB,EACA,KAAM,KAAK,UAAUe,CAAO,CAC9B,CAAC,EACE,KAAMC,GAAaA,EAAS,KAAK,CAAC,EAClC,KAAMC,GAAS,CACd,GAAIA,EAAM,CAGR,QAAQ,IAAIA,CAAI,EAChB,IAAMC,EAAS,KAAK,MAAMD,CAAI,EAE1B,MAAM,QAAQC,CAAM,IACtBb,EAAa,UAAY,GAEzBa,EAAO,QAASC,GAAQ,CACtB,IAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY;AAAA,iEAEfD,EAAI,EACN,gBAAgBA,EAAI,IAAI;AAAA;AAAA,kFAGtBA,EAAI,OACN;AAAA,iEAC+BA,EAAI,IAAI,OACvCA,EAAI,EACN,OAAO,IAAI,KACTA,EAAI,SACN,EAAE,eAAe,CAAC;AAAA;AAAA;AAAA,2CAIlBd,EAAa,YAAYe,CAAM,CACjC,CAAC,EAEL,CACF,CAAC,EACA,MAAOC,GAAU,QAAQ,IAAIA,CAAK,CAAC,CACxC,CACF,CAAC,CACH,CAAC,CACH,CAAC,EAEc,QAAQrB,EAAM,CAAE,UAAW,GAAM,QAAS,EAAK,CAAC,EAEnE,CAAC,CAEL,CAAC,CACH,CAAC,CACH,CAAC,EAEY,QAAQA,EAAM,CAAE,UAAW,GAAM,QAAS,EAAK,CAAC,CAC/D,EAhHO,QAgHJ,GAIF,IAAMD,EAAA,IAAM,CACX,IAAMC,EAAO,SAAS,cAAc,OAAO,EAEtB,IAAI,iBAAkBC,GAAc,CACvDA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,EAClBA,EAAK,UAAU,QAAQ,EACrCA,EACAA,EAAK,gBAAgB,QAAQ,IAG/BH,EAAK,iBAAiB,QAAS,SAAUI,EAAO,CAC1CA,EAAM,OAAO,QAAQ,QAAQ,IAC/B,QAAQ,IAAI,0BAA0B,EAGf,IAAI,iBAAkBH,GAAc,CACzDA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,CACpC,IAAME,EAAeF,EAAK,UAAU,WAAW,EAC3CA,EACAA,EAAK,gBAAgB,WAAW,EAE9BG,EAAiBH,EAAK,UAAU,aAAa,EAC/CA,EACAA,EAAK,gBAAgB,aAAa,EAElCG,IACF,QAAQ,IAAI,oCAAoC,EAChDA,EAAe,iBAAiB,QAAS,IAAM,CAC7C,SAAWP,EAACQ,GAAS,CACnB,IAAIC,EAAQ,SAAS,OAAO,MAAM,IAAI,EACtC,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACrC,IAAIC,EAASF,EAAMC,CAAC,EAChB,CAACE,EAAMC,CAAK,EAAIF,EAAO,MAAM,GAAG,EACpC,GAAIC,IAASJ,EACX,OAAO,mBAAmBK,CAAK,CAEnC,CACA,OAAO,IACT,EAVW,YAYX,IAAIC,EAAW,SAAS,cAAc,EAClCC,EAAU,SAAS,MAAM,EACvBC,EAAU,CACd,OAAQD,EACR,QAASD,CACX,EACA,QAAQ,IACN,eAAeC,CAAO,iBAAiBD,CAAQ,EACjD,EAGA,IAAMS,EAAS,IAAI,UAAU,qBAAqB,EAClDA,EAAO,iBAAiB,OAAQ,IAAM,CACpC,QAAQ,IAAI,UAAU,EACtBA,EAAO,KAAK,KAAK,UAAUP,CAAO,CAAC,CACrC,CAAC,EACDO,EAAO,iBAAiB,UAAYlB,GAAU,CAE5C,IAAMc,EAAS,KAAK,MAAMd,EAAM,IAAI,EACpC,OAAO,SAAS,CACd,IAAKC,EAAa,aAClB,SAAU,QACZ,CAAC,EACG,MAAM,QAAQa,CAAM,IACtBb,EAAa,UAAY,GAEzBa,EAAO,QAASC,GAAQ,CACtB,IAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY;AAAA,iEAEbD,EAAI,EACN,gBAAgBA,EAAI,IAAI;AAAA;AAAA,kFAGtBA,EAAI,OACN;AAAA,iEAC+BA,EAAI,IAAI,OACzCA,EAAI,EACN,OAAO,IAAI,KACTA,EAAI,SACN,EAAE,eAAe,CAAC;AAAA;AAAA;AAAA,2CAIlBd,EAAa,YAAYe,CAAM,EAC/B,QAAQ,IAAI,mBAAmB,CACjC,CAAC,EAEL,CAAC,CACH,CAAC,EAEL,CAAC,CACH,CAAC,CACH,CAAC,EAEc,QAAQpB,EAAM,CAAE,UAAW,GAAM,QAAS,EAAK,CAAC,EAEnE,CAAC,CAEL,CAAC,CACH,CAAC,CACH,CAAC,EAEY,QAAQA,EAAM,CAAE,UAAW,GAAM,QAAS,EAAK,CAAC,CAC/D,EA1GO,QA0GJ,GAGF,KAAOD,EAAA,IAAM,CACZ,IAAMC,EAAO,SAAS,cAAc,OAAO,EAElB,IAAI,iBAAkBC,GAAc,CAC3DA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,EAClBA,EAAK,UAAU,QAAQ,EACrCA,EACAA,EAAK,gBAAgB,QAAQ,IAG/BH,EAAK,iBAAiB,QAAS,SAAUI,EAAO,CAC1CA,EAAM,OAAO,QAAQ,QAAQ,IAC/B,QAAQ,IAAI,0BAA0B,EAGlB,IAAI,iBAAkBH,GAAc,CACtDA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,EACfA,EAAK,UAAU,WAAW,EAC3CA,EACAA,EAAK,gBAAgB,WAAW,IAGT,IAAI,iBAC1BF,GAAc,CACbA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,CACpC,IAAMoB,EAAapB,EAAK,UAAU,SAAS,EACvCA,EACAA,EAAK,mBAAmB,SAAS,EAGjCoB,GACFA,EAAW,QAAShB,GAAS,CAC3B,QAAQ,IAAI,gCAAgC,EAC5C,QAAQ,IAAIA,EAAK,QAAQ,IAAI,EAE7B,QAAUR,EAACQ,GAAS,CAClB,IAAIC,EAAQ,SAAS,OAAO,MAAM,IAAI,EACtC,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACrC,IAAIC,EAASF,EAAMC,CAAC,EAChB,CAACE,EAAMC,CAAK,EAAIF,EAAO,MAAM,GAAG,EACpC,GAAIC,IAASJ,EACX,OAAO,mBAAmBK,CAAK,CAEnC,CACA,OAAO,IACT,EAVU,WAYV,IAAIY,EAAa,QAAQ,MAAM,EAC/B,QAAQ,IAAIA,CAAU,EAClBjB,EAAK,QAAQ,OAASiB,GAExB,QAAQ,IAAI,MAAM,EAClBjB,EAAK,MAAM,QAAU,OACrBA,EAAK,MAAM,eAAiB,OACnBA,EAAK,QAAQ,OAASiB,IAE/B,QAAQ,IAAI,WAAW,EACvBjB,EAAK,MAAM,QAAU,OACrBA,EAAK,MAAM,eAAiB,SAE9B,QAAQ,IAAI,WAAW,CACzB,CAAC,CAEL,CAAC,CACH,CAAC,CACH,CACF,EAEiB,QAAQP,EAAM,CAC7B,UAAW,GACX,QAAS,EACX,CAAC,CAEL,CAAC,CACH,CAAC,CACH,CAAC,EAEW,QAAQA,EAAM,CACxB,UAAW,GACX,QAAS,EACX,CAAC,EAEL,CAAC,CAEL,CAAC,CACH,CAAC,CACH,CAAC,EAEgB,QAAQA,EAAM,CAAE,UAAW,GAAM,QAAS,EAAK,CAAC,CACnE,EA5FQ,SA4FL,GAGF,WAAaD,EAAA,IAAM,CAClB,IAAMC,EAAO,SAAS,cAAc,OAAO,EACtB,IAAI,iBAAkBC,GAAc,CACvDA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,EAClBA,EAAK,UAAU,QAAQ,EACrCA,EACAA,EAAK,gBAAgB,QAAQ,IAG/BH,EAAK,iBAAiB,QAAS,SAAUI,EAAO,CAC1CA,EAAM,OAAO,QAAQ,QAAQ,GAER,IAAI,iBAAkBH,GAAc,CACzDA,EAAU,QAASC,GAAa,CAC9BA,EAAS,WAAW,QAASC,GAAS,CACpC,IAAME,EAAeF,EAAK,UAAU,WAAW,EAC3CA,EACAA,EAAK,gBAAgB,WAAW,EAMpC,GAJuBA,EAAK,UAAU,aAAa,EAC/CA,EACAA,EAAK,gBAAgB,aAAa,EAElB,CAClB,SAAWJ,EAACQ,GAAS,CACnB,IAAIC,EAAQ,SAAS,OAAO,MAAM,IAAI,EACtC,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACrC,IAAIC,EAASF,EAAMC,CAAC,EAChB,CAACE,EAAMC,CAAK,EAAIF,EAAO,MAAM,GAAG,EACpC,GAAIC,IAASJ,EACX,OAAO,mBAAmBK,CAAK,CAEnC,CACA,OAAO,IACT,EAVW,YAYX,IAAIC,EAAW,SAAS,cAAc,EAEhCE,EAAU,CACd,OAFY,SAAS,MAAM,EAG3B,QAASF,CACX,EAGMS,EAAS,IAAI,UAAU,qBAAqB,EAClDA,EAAO,iBAAiB,OAAQ,IAAM,CACpCA,EAAO,KAAK,KAAK,UAAUP,CAAO,CAAC,CACrC,CAAC,EACDO,EAAO,iBAAiB,UAAYlB,GAAU,CAC5C,IAAMc,EAAS,KAAK,MAAMd,EAAM,IAAI,EAEpC,OAAO,SAAS,CACd,IAAKC,EAAa,aAClB,SAAU,QACZ,CAAC,EACG,MAAM,QAAQa,CAAM,IACtBb,EAAa,UAAY,GAEzBa,EAAO,QAASC,GAAQ,CACtB,IAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY;AAAA,iEAEXD,EAAI,EACN,gBAAgBA,EAAI,IAAI;AAAA;AAAA,kFAGtBA,EAAI,OACN;AAAA,iEAC+BA,EAAI,IAAI,OAC3CA,EAAI,EACN,OAAO,IAAI,KACTA,EAAI,SACN,EAAE,eAAe,CAAC;AAAA;AAAA;AAAA,2CAIlBd,EAAa,YAAYe,CAAM,CACjC,CAAC,EAEL,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CAAC,EACc,QAAQpB,EAAM,CAAE,UAAW,GAAM,QAAS,EAAK,CAAC,CAEnE,CAAC,CAEL,CAAC,CACH,CAAC,CACH,CAAC,EAEY,QAAQA,EAAM,CAAE,UAAW,GAAM,QAAS,EAAK,CAAC,CAC/D,EA9Fc,eA8FX",
  "names": ["__name", "Home", "mutations", "mutation", "node", "event", "nodemnchtMgs", "nodechtsbmtBtn", "elem", "ckies", "i", "cookie", "name", "value", "sltdusrp", "lgrusrp", "prtsObj", "response", "data", "datadt", "msg", "msgDiv", "error", "socket", "nodemgscrd", "usrprtckie"]
}
