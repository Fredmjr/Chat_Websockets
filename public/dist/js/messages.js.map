{
  "version": 3,
  "sources": ["../../src/js/messages.js"],
  "sourcesContent": ["//1. AUTO PROFILER FUNCTION\r\n// Profiler with mgs writer to db function\r\n(Fuc = () => {\r\n  const Home = document.querySelector(\".Home\");\r\n  //to find usrcl the button for search users\r\n  const proflrobsrvr = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      mutation.addedNodes.forEach((node) => {\r\n        const nodeusrcl = node.matches?.(\".usrcl\")\r\n          ? node\r\n          : node.querySelector?.(\".usrcl\");\r\n\r\n        if (nodeusrcl) {\r\n          Home.addEventListener(\"click\", function (event) {\r\n            if (event.target.matches(\".usrcl\")) {\r\n              console.log(\"user button was clicked!\");\r\n              //1.PROFILER MGS\r\n              //mnchtMgs  Function to find message div for messages purpose!\r\n              const mnchtMgsobsrvr = new MutationObserver((mutations) => {\r\n                mutations.forEach((mutation) => {\r\n                  mutation.addedNodes.forEach((node) => {\r\n                    const nodemnchtMgs = node.matches?.(\".mnchtMgs\")\r\n                      ? node\r\n                      : node.querySelector?.(\".mnchtMgs\");\r\n\r\n                    const nodechtsbmtBtn = node.matches?.(\".chtsbmtBtn\")\r\n                      ? node\r\n                      : node.querySelector?.(\".chtsbmtBtn\");\r\n\r\n                    if (nodemnchtMgs) {\r\n                      console.log(\"we have message div\");\r\n                      //LOAD SPINNER\r\n                      nodemnchtMgs.innerHTML = `<div>\r\n                  <img src=\"/assests/animations/loading.gif\" width=\"50\" alt=\"\" />\r\n                    </div>`;\r\n                      //COOKIE RETREIVAL...\r\n                      autockie = (elem) => {\r\n                        let ckies = document.cookie.split(\"; \");\r\n                        for (let i = 0; i < ckies.length; i++) {\r\n                          let cookie = ckies[i];\r\n                          let [name, value] = cookie.split(\"=\");\r\n                          if (name === elem) {\r\n                            return decodeURIComponent(value);\r\n                          }\r\n                        }\r\n                        return null;\r\n                      };\r\n\r\n                      let sltdusrp = autockie(\"targtdusrprt\");\r\n                      let lgrusrp = autockie(\"usrP\");\r\n                      const prtsObj = {\r\n                        lgrsur: lgrusrp,\r\n                        sltdusr: sltdusrp,\r\n                      };\r\n                      console.log(`loger: ${lgrusrp} & recepient: ${sltdusrp}`);\r\n                      //  Query messages\r\n                      const Home = document.querySelector(\".Home\");\r\n                      fetch(\"/mgs/prtsmgs\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                          \"Content-Type\": \"application/json\",\r\n                          // 'Authorization': 'Bearer YOUR_TOKEN',\r\n                        },\r\n                        body: JSON.stringify(prtsObj),\r\n                      })\r\n                        .then((response) => response.text())\r\n                        .then((data) => {\r\n                          if (data) {\r\n                            //Messages\r\n                            nodemnchtMgs.innerHTML = `${data}`;\r\n                            console.log(data);\r\n                          }\r\n                        })\r\n                        .catch((error) => console.log(error));\r\n                    }\r\n                  });\r\n                });\r\n              });\r\n\r\n              mnchtMgsobsrvr.observe(Home, { childList: true, subtree: true });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  proflrobsrvr.observe(Home, { childList: true, subtree: true });\r\n})();\r\n\r\n//\r\n(Cuc = () => {\r\n  const Home = document.querySelector(\".Home\");\r\n  //to find usrcl the button for search users\r\n  const proflrobsrvr = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      mutation.addedNodes.forEach((node) => {\r\n        const nodeusrcl = node.matches?.(\".usrcl\")\r\n          ? node\r\n          : node.querySelector?.(\".usrcl\");\r\n\r\n        if (nodeusrcl) {\r\n          Home.addEventListener(\"click\", function (event) {\r\n            if (event.target.matches(\".usrcl\")) {\r\n              console.log(\"user button was clicked!\");\r\n              //1.PROFILER MGS\r\n              //mnchtMgs  Function to find message div for messages purpose!\r\n              const mnchtMgsobsrvr = new MutationObserver((mutations) => {\r\n                mutations.forEach((mutation) => {\r\n                  mutation.addedNodes.forEach((node) => {\r\n                    const nodemnchtMgs = node.matches?.(\".mnchtMgs\")\r\n                      ? node\r\n                      : node.querySelector?.(\".mnchtMgs\");\r\n\r\n                    const nodechtsbmtBtn = node.matches?.(\".chtsbmtBtn\")\r\n                      ? node\r\n                      : node.querySelector?.(\".chtsbmtBtn\");\r\n\r\n                    if (nodechtsbmtBtn) {\r\n                      console.log(\"we have message div nodechtsbmtBtn\");\r\n                      nodechtsbmtBtn.addEventListener(\"click\", () => {\r\n                        autockie = (elem) => {\r\n                          let ckies = document.cookie.split(\"; \");\r\n                          for (let i = 0; i < ckies.length; i++) {\r\n                            let cookie = ckies[i];\r\n                            let [name, value] = cookie.split(\"=\");\r\n                            if (name === elem) {\r\n                              return decodeURIComponent(value);\r\n                            }\r\n                          }\r\n                          return null;\r\n                        };\r\n\r\n                        let sltdusrp = autockie(\"targtdusrprt\");\r\n                        let lgrusrp = autockie(\"usrP\");\r\n                        const prtsObj = {\r\n                          lgrsur: lgrusrp,\r\n                          sltdusr: sltdusrp,\r\n                        };\r\n                        console.log(\r\n                          `both loger: ${lgrusrp} & recepient: ${sltdusrp}`\r\n                        );\r\n\r\n                        fetch(\"/mgs/prtsmgs\", {\r\n                          method: \"POST\",\r\n                          headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            // 'Authorization': 'Bearer YOUR_TOKEN',\r\n                          },\r\n                          body: JSON.stringify(prtsObj),\r\n                        })\r\n                          .then((response) => response.text())\r\n                          .then((data) => {\r\n                            if (data) {\r\n                              //Messages\r\n                              nodemnchtMgs.innerHTML = `${data}`;\r\n                              console.log(data);\r\n                            }\r\n                          })\r\n                          .catch((error) => console.log(error));\r\n                      });\r\n                    }\r\n                  });\r\n                });\r\n              });\r\n\r\n              mnchtMgsobsrvr.observe(Home, { childList: true, subtree: true });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  proflrobsrvr.observe(Home, { childList: true, subtree: true });\r\n})();\r\n"],
  "mappings": "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",
  "names": ["__name", "Home", "mutations", "mutation", "node", "event", "nodemnchtMgs", "nodechtsbmtBtn", "elem", "ckies", "cookie", "name", "value", "sltdusrp", "lgrusrp", "prtsObj", "response", "data", "error", "i"]
}
